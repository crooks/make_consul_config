#!/usr/bin/env python

import argparse
import boto3
import boto.utils
import json
import os.path
import socket
import subprocess
import sys


"""
When run on an AWS EC2 instance, this script will generate a config.json file
suitable for consul agents or servers.  It is intended to be run as a
ExecStartPre task of the systemd consul.service file.

The script takes two arguments, both optional:
    --file <filename>  Write output to a file instead of stdout.
    --server           Generate a server config instead of a (default) client.
"""


__author__ = "Steve Crook"


def get_args(argv=None):
    """
    Create an ars parser and return it as an object

    :returns: Python argparse object
    :rtype: argparse
    """
    parser = argparse.ArgumentParser(
            description='Dynamically generate consul config',
            formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('--dry-run', dest='dryrun', action='store_true',
                        help='Don\'t change anything')
    parser.add_argument('--file', dest='filename', type=str, default=None,
                        help='Filename to write config into')
    parser.add_argument('--override', dest='override', type=str,
                        default='/etc/consul.d/override.json',
                        help='Path to json formatted parameter override')
    parser.add_argument('--server', dest='server', action='store_true',
                        help='Generate a server config')
    return parser.parse_args(argv)


def import_overrides(filename):
    """
    Read a json file containing metadata keys.  If the file doesn't exist,
    that's fine, just return an empty dict.

    :param filename: Filename to import metadata from.
    :returns: Metadata dictionary
    :rtype: dict
    """
    try:
        with open(filename) as f:
            data = json.load(f)
        return data
    except IOError:
        return {}


def make_hostname(metadata):
    """
    Generate a hostname using the format:
    <cluster>-<role>-<octet4>
    Ideally, cluster and role should be predefined but, if they're absent, the
    function will generate some sane values from the IP Address.

    :param: metadata: Local instance metadata
    :type metadata: dict
    :returns: hostname
    :rtype: string
    """
    ip = get_ip()
    octets = ip.split('.')
    assert len(octets) == 4
    if 'cluster' not in metadata:
        metadata['cluster'] = 'unknown{}'.format(octets[1])
    if 'role' not in metadata:
        metadata['role'] = octets[2]
    return '{}-{}-{}'.format(metadata['cluster'], metadata['role'], octets[3])


def is_ec2():
    """
    Return True if this instance is deemed to be an AWS EC2 type.

    :returns: EC2 boolean
    :rtype: boolean
    """
    if os.path.isfile('/sys/hypervisor/uuid'):
        with open('/sys/hypervisor/uuid', 'r') as f:
            if f.readline().startswith('ec2'):
                return True
    if os.path.isfile('/sys/devices/virtual/dmi/id/sys_vendor'):
        with open('/sys/devices/virtual/dmi/id/sys_vendor', 'r') as f:
            if f.readline().startswith('Amazon'):
                return True
    return False


def mangle_keys(obj):
    """
    Take an AWS metadata object and convert any keys (at any nested level) that
    contain underscores to instead use hyphens.

    :param obj: AWS EC2 instance metadata
    :type obj: dict
    :returns: Mangled AWS EC2 instance metadata
    :rtype: dict
    """
    for key in obj.keys():
        new_key = key.replace("-", "_")
        if new_key != key:
            if isinstance(obj[key], dict):
                obj[new_key] = mangle_keys(obj[key])
            else:
                obj[new_key] = obj[key]
            del obj[key]
    return obj


def get_tags(instance_id, region):
    """
    Given an instance ID and region, return a dictionary of Key/Value pairs
    representing the EC2 tags.

    :param: instance_id: AWS EC2 Instance ID
    :type instance_id: string
    :param: region: AWS region name
    :type region: string
    :returns: AWS EC2 instance tags
    :rtype: dict
    """
    ec2 = boto3.resource('ec2', region_name=region)
    ec2instance = ec2.Instance(instance_id)
    return ec2instance.tags


def get_ec2_metadata():
    """
    Initially grab the AWS EC2 metadata for the local host.  Then modify it to
    include a tags hierarchy within the dict that contains the content of the
    local EC2 tags.

    :returns: AWS EC2 metadata (with Tags)
    :rtype: dict
    """
    metadata = boto.utils.get_instance_metadata()
    metadata['user_data'] = boto.utils.get_instance_userdata()
    metadata['identity'] = boto.utils.get_instance_identity()
    metadata = mangle_keys(metadata)

    region = metadata['identity']['document']['region']
    # Create a region shortname (E.g. euwest1) and insert it into metadata.
    region_short = region.replace('-', '')
    instance_id = metadata['instance_id']
    # Insert EC2 tags for the local instance into metadata.
    metadata['tags'] = {t['Key'].lower(): t['Value']
                        for t in get_tags(instance_id, region)}

    # newmeta contains a greatly simplified version of the metadata, containing
    # just the key/value pairs required to build a config.
    newmeta = {}
    if 'cluster' in metadata['tags']:
        newmeta['cluster'] = metadata['tags']['cluster']
    if 'consul' in metadata['tags']:
        newmeta['consul'] = metadata['tags']['consul']
    if 'name' in metadata['tags']:
        newmeta['legacy_hostname'] = metadata['tags']['name']
        newmeta['hostname'] = metadata['tags']['name'].replace('_', '-')
    if 'role' in metadata['tags']:
        newmeta['role'] = metadata['tags']['role']
    newmeta['instance_type'] = metadata['instance_type']
    newmeta['private_ip'] = metadata['local_ipv4']
    newmeta['region'] = region
    newmeta['region_short'] = region_short
    return newmeta


def get_ip():
    """
    Return the local IPv4 address.

    :returns: Local IPv4 address.
    :rtype ip: string
    """
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    try:
        s.connect(('10.255.255.255', 1))
        ip = s.getsockname()[0]
    except:
        ip = '127.0.0.1'
    finally:
        s.close()
    return ip


def get_hostname():
    return socket.gethostname()


def client_template():
    """
    Return a template string suitable for constructing a consul config file.

    :returns: consul client config.json template
    :rtype: string
    """
    return """{{
    "bind_addr": "{private_ip}",
    "datacenter": "{region_short}",
    "data_dir": "/var/local/lib/consul",
    "enable_script_checks": true,
    "node_name": "{hostname}",
    "node_meta": {{
        "cluster": "{cluster}",
        "ec2_type": "{instance_type}",
        "legacy_hostname": "{legacy_hostname}"
    }},
    "retry_join": ["provider=aws tag_key=Consul tag_value={consul}"],
    "server": false
}}
"""


def server_template():
    """
    Return a template string suitable for constructing a consul server config
    file.

    :returns: consul client config.json template
    :rtype: string
    """
    return """{{
    "bootstrap_expect": 3,
    "datacenter": "{region_short}",
    "data_dir": "/var/local/lib/consul",
    "enable_script_checks": true,
    "node_name": "{hostname}",
    "node_meta": {{
        "cluster": "{cluster}",
        "ec2_type": "{instance_type}",
        "legacy_hostname": "{legacy_hostname}"
    }},
    "retry_join": ["provider=aws tag_key=Consul tag_value={consul}"],
    "server": true,
    "ui": true
}}
"""

args = get_args()

# This is where metadata is obtained from various sources.
if is_ec2():
    metadata = get_ec2_metadata()
else:
    metadata = {}

# Override metadata obtained from other sources.
overrides = import_overrides(args.override)
metadata.update(overrides)

# If the metadata doesn't contain the private_ip, we can safely ascertain it by
# querying the host itself.
if 'private_ip' not in metadata:
    metadata['private_ip'] = get_ip()

# If the override file contains a generate_hostname bool and it's True, try to
# make a sane hostname from the other available metadata.
if 'generate_hostname' in metadata and metadata['generate_hostname']:
    metadata['hostname'] = make_hostname(metadata)
    if not args.dryrun:
        subprocess.call(['sudo',
                         'hostnamectl',
                         '--no-ask-password',
                         'set-hostname',
                         metadata['hostname']])

# Use the client template unless run with the --server flag.
if args.server:
    template = server_template()
else:
    template = client_template()
# Write to stdout unless a filename is provided.
if args.filename is None:
    sys.stdout.write(template.format(**metadata))
else:
    with open(args.filename, 'w') as f:
        f.write(template.format(**metadata))
